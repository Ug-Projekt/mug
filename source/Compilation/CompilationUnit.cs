using LLVMSharp.Interop;
using Mug.Models.Generator;
using Mug.Models.Parser;
using System;
using System.Diagnostics;
using System.IO;

namespace Mug.Compilation
{
    public class CompilationUnit
    {
        public bool FailedOpeningPath { get; } = false;
        public IRGenerator IRGenerator;
        private const string ClangFilename = "C:/Program Files/LLVM/bin/clang.exe";

        public CompilationUnit(string moduleName, string source, bool isMainModule)
        {
            IRGenerator = new(moduleName, source, isMainModule);
        }

        public CompilationUnit(string path, bool isMainModule, bool throwerror)
        {
            if (!File.Exists(path))
            {
                if (throwerror)
                    CompilationErrors.Throw($"Unable to open path: '{path}'");

                FailedOpeningPath = true;
            }
            else
                IRGenerator = new(path, File.ReadAllText(path), isMainModule);
        }

        public void Compile(int optimizazioneLevel, string output, bool onlyBitcode, string optionalFlag)
        {
            // generates the bytecode
            Generate();

            CompileModule(optimizazioneLevel, output, onlyBitcode, optionalFlag);
        }

        /// <summary>
        /// writes the llvm module to a file and calls the llvm compiler on it
        /// </summary>
        private void CompileModule(int optimizazioneLevel, string output, bool onlyBitcode, string optionalFlag)
        {
            writeFile(
                IRGenerator.Module,
                optimizazioneLevel,
                Path.ChangeExtension(IRGenerator.Parser.Lexer.ModuleName, "bc"),
                output,
                onlyBitcode,
                optionalFlag);

            static void nothing()
            {
                // called to avoid misunderstanding while reading the code
            }

            /// writes the bytecode to a file, calls clang on it and deletes the bytecode file
            static void writeFile(LLVMModuleRef module, int optimizazioneLevel, string bitcode, string output, bool onlyBitcode, string optionalFlag)
            {
                // deletes a possible file named in the same way as the result, to avoid bugs in the while under
                if (File.Exists(bitcode)) File.Delete(bitcode);

                // writes the module to a file
                if (module.WriteBitcodeToFile(bitcode) != 0)
                    CompilationErrors.Throw("Error writing to file");

                if (onlyBitcode) return;

                // the program goes in this keeps the program waiting until it finds the file containing the compiled program
                while (!File.Exists(bitcode)) nothing();

                // clang compiler
                CallClang($"{bitcode} -o {output} {optionalFlag}", optimizazioneLevel);

                // deletes the bytecode file, now remains only the executable generated by clang
                if (File.Exists(bitcode)) File.Delete(bitcode);
            }

        }

        public static void CallClang(string command, int optimizazioneLevel)
        {
            // checks the clang execuatble exists
            if (!File.Exists(ClangFilename))
                CompilationErrors.Throw($"Cannot find the clang executable at: '{ClangFilename}'");

            // call clang
            var clang = Process.Start(
                new ProcessStartInfo
                {
                    FileName = ClangFilename,
                    Arguments = $"-O{optimizazioneLevel} {command}",
                    // invisible window
                    CreateNoWindow = true,
                    UseShellExecute = false,
                    ErrorDialog = false,
                    RedirectStandardInput = true,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                });

            // the program will wait until clang works
            clang.WaitForExit();
            if (clang.ExitCode != 0)
            {
                var output = clang.StandardOutput.ReadToEnd();

                if (output == "")
                    output = clang.StandardError.ReadToEnd();

                CompilationErrors.Throw($"External compiler: {output}");
            }
        }

        public INode GenerateAST()
        {
            IRGenerator.Parser.Lexer.Tokenize();
            IRGenerator.Parser.Parse();

            return IRGenerator.Parser.Module;
        }

        /// <param name="verifyLLVMModule">
        /// false only when debugs to see the module when llvm finds an error
        /// </param>
        public void Generate(bool verifyLLVMModule = true, bool dumpModule = false)
        {
            GenerateAST();
            IRGenerator.Generate();

            if (dumpModule)
                IRGenerator.Module.Dump();

            if (verifyLLVMModule)
                if (!IRGenerator.Module.TryVerify(LLVMVerifierFailureAction.LLVMReturnStatusAction, out var error))
                    CompilationErrors.Throw($"Cannot build due to external compiler error: {error}");
        }
    }
}
